[project]
name = "factall"
version = "0.1.0"
description = "Nexus of data-driven operations"
authors = [{ name = "fernroot", email = "arnaldojaws@gmail.com" }]
license = { text = "BSD-3-Clause license" }
readme = "README.md"
requires-python = ">=3.13"
dependencies = ["starlette~=0.46.1"]

[tool.poetry]
package-mode = false

[tool.poetry.group.dev.dependencies]
mypy = "^1.15.0"
pytest = "^8.3.5"
ruff = "^0.11.2"
pre-commit = "^4.2.0"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

# Mypy

[tool.mypy]
check_untyped_defs = true
color_output = true
disallow_any_decorated = true
disallow_any_explicit = true
disallow_any_expr = true
disallow_any_generics = true
disallow_any_unimported = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
exclude = ["tests/.*"]
pretty = true
python_version = "3.13"
show_error_context = true
warn_incomplete_stub = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

# Ruff

[tool.ruff]
output-format = "concise"
preview = true
line-length = 88

[tool.ruff.format]
quote-style = "double"
skip-magic-trailing-comma = true

[tool.ruff.lint]
select = [
    "A",     # flake8-builtins
    "AIR",   # Airflow
    "ANN",   # flake8-annotations
    "ARG",   # flake8-unused-arguments
    "ASYNC", # flake8-async
    "B",     # flake8-bugbear
    "BLE",   # flake8-blind-except
    "C4",    # flake8-comprehensions
    "C90",   # mccabe
    "COM",   # flake8-commas
    "D",     # pydocstyle
    "DJ",    # flake8-django
    "DOC",   # pydoclint
    "DTZ",   # flake8-datetimez
    "E",     # Error
    "EM",    # flake8-errmsg
    "ERA",   # eradicate
    "EXE",   # flake8-executable
    "F",     # Pyflakes
    "FA",    # flake8-future-annotations
    "FAST",  # FastAPI
    "FBT",   # flake8-boolean-trap
    "FIX",   # flake8-fixme
    "FLY",   # flynt
    "FURB",  # refurb
    "G",     # flake8-logging-format
    "I",     # isort
    "ICN",   # flake8-import-conventions
    "INP",   # flake8-no-pep420
    "INT",   # flake8-gettext
    "ISC",   # flake8-implicit-str-concat
    "LOG",   # flake8-logging
    "N",     # pep8-naming
    "NPY",   # NumPy-specific rules
    "PD",    # pandas-vet
    "PERF",  # Perflint
    "PGH",   # pygrep-hooks
    "PIE",   # flake8-pie
    "PL",    # Pylint
    "PLC",   # Convention
    "PLE",   # Error
    "PLR",   # Refactor
    "PLW",   # Warning
    "PT",    # flake8-pytest-style
    "PTH",   # flake8-use-pathlib
    "PYI",   # flake8-pyi
    "Q",     # flake8-quotes
    "RET",   # flake8-return
    "RSE",   # flake8-raise
    "RUF",   # Ruff-specific rules
    "S",     # flake8-bandit
    "SIM",   # flake8-simplify
    "SLF",   # flake8-self
    "SLOT",  # flake8-slots
    "T10",   # flake8-debugger
    "T20",   # flake8-print
    "TC",    # flake8-type-checking
    "TD",    # flake8-todos
    "TID",   # flake8-tidy-imports
    "TRY",   # tryceratops
    "UP",    # pyupgrade
    "W",     # Warning
    "YTT",   # flake8-2020

]
ignore = [
    "CPY", # flake8-copyright
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "ANN", # flake8-annotations
    "D",   # pydocstyle
    "S",   # flake8-bandit
]

[tool.ruff.lint.isort]
combine-as-imports = true
